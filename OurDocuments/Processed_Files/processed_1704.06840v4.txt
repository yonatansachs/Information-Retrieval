ranking
fairness
constraints
elisa
celis
damian
straszak
nisheeth
vishnoi
arxiv
1704
06840v4
cs
ds
30
jul
2018
cole
polytechnique
fe
de
rale
de
lausanne
epfl
switzerland
abstract
ranking
algorithms
deployed
widely
order
set
items
applications
search
engines
news
feeds
recommendation
systems
recent
studies
however
shown
left
unchecked
output
ranking
algorithms
can
result
decreased
diversity
type
content
presented
promote
stereotypes
polarize
opinions
order
address
issues
study
following
variant
traditional
ranking
problem
addition
fairness
diversity
constraints
given
collection
items
along
value
placing
item
particular
position
ranking
collection
sensitive
attributes
gender
race
political
opinion
item
collection
fairness
constraints
bound
number
items
attribute
allowed
appear
top
positions
ranking
goal
output
ranking
maximizes
value
respect
original
rank
quality
metric
respecting
constraints
problem
encapsulates
various
well-studied
problems
related
bipartite
hypergraph
matching
special
cases
turns
hard
approximate
even
simple
constraints
main
technical
contributions
fast
exact
approximation
algorithms
along
complementary
hardness
results
together
come
close
settling
approximability
constrained
ranking
maximization
problem
unlike
prior
work
approximability
constrained
matching
problems
algorithm
runs
linear
time
even
number
constraints
polynomially
large
approximation
ratio
depend
number
constraints
produces
solutions
small
constraint
violations
results
rely
insights
constrained
matching
problem
objective
function
satisfies
certain
properties
appear
common
ranking
metrics
discounted
cumulative
gain
dcg
spearman
rho
bradley-terry
along
nested
structure
fairness
constraints
contents
introduction
model
results
related
work
proof
overviews
polynomial
time
algorithm
12
dynamic
programming-based
exact
algorithm
15
7.1
geometric
interpretation
fairness
constraints
15
7.2
dynamic
programming
algorithm
15
algorithms
upper-bound
constraints
17
8.1
integrality
lp
solutions
17
8.2
fast
greedy
algorithm
19
approximation
algorithm
20
10
hardness
results
23
11
discussion
future
work
26
values
wij
common
ranking
metrics
rank-1
metrics
bradley-terry
metrics
alignment
metrics
31
31
31
32
introduction
selecting
ranking
subset
data
fundamental
problem
information
retrieval
core
ubiquitous
applications
including
ordering
search
results
google
personalized
social
media
feeds
facebook
twitter
instagram
ecommerce
websites
amazon
ebay
online
media
sites
netflix
youtube
basic
algorithmic
problem
arises
follows
items
webpages
images
documents
goal
output
list
items
order
valuable
given
user
company
item
position
one
given
number
wij
captures
value
item
contributes
ranking
placed
position
values
can
tailored
particular
query
user
significant
effort
gone
developing
models
mechanisms
learn
parameters
mrs
08
practice
many
ways
one
arrive
wij
results
slightly
different
metric
value
ranking
prevalent
examples
include
versions
discounted
cumulative
gain
dcg
jk02
bradley-terry
bt52
spearman
rho
spe04
note
many
metrics
one
necessarily
need
nm
parameters
specify
typically
degrees
freedom
enough
just
specifying
quality
item
still
choose
work
general
setting
abstract
important
properties
weight
matrix
satisfies
generally
metrics
wij
non-increasing
interpret
i1
i2
mean
i1
better
quality
i2
value
ranking
can
increase
placing
i1
i2
ranking
formally
values
satisfy
following
property
known
monotonicity
monge
condition
wi1
j1
wi2
j1
wi1
j1
wi1
j2
wi1
j1
wi2
j2
wi1
j2
wj1
i2
i1
i2
j1
j2
see
appendix
ranking
maximization
problem
find
assignment
items
positions
total
value
obtained
maximized
form
problem
equivalent
finding
maximum
weight
matching
complete
bipartite
graph
well
known
solution
hungarian
algorithm
however
recent
studies
shown
producing
rankings
manner
can
result
one
type
content
overrepresented
expense
another
form
algorithmic
bias
can
lead
grave
societal
consequences
search
results
inadvertently
promote
stereotypes
under-representing
sensitive
attributes
race
gender
kmm15
bcz
16
news
feeds
can
promote
extremist
ideology
chrg16
possibly
even
influence
results
elections
bae16
bma15
example
er15
demonstrated
varying
ranking
set
news
articles
voting
preferences
undecided
voters
can
manipulated
towards
ensuring
type
content
overrepresented
context
ranking
problem
defined
introduce
constrained
ranking
maximization
problem
restricts
allowable
rankings
type
content
dominates
ensure
rankings
fair
since
fairness
bias
mean
different
things
different
contexts
rather
fixing
one
specific
notion
fairness
allow
user
specify
set
fairness
constraints
words
take
constraints
input
motivating
example
consider
setting
set
items
consists
images
computer
scientists
image
associated
several
possibly
non-disjoint
sensitive
attributes
properties
gender
ethnicity
age
subset
size
needs
selected
ranked
user
can
specify
upper-bound
uk
number
items
property
allowed
appear
top
positions
ranking
similarly
lower-bound
lk
formally
let
set
properties
let
set
items
property
note
sets
need
disjoint
let
binary
assignment
matrix
whose
j-th
column
contains
one
i-th
position
item
assigned
position
position
must
assigned
exactly
one
item
item
can
assigned
one
position
say
satisfies
fairness
constraints
xij
uk
lk
let
family
assignment
matrices
satisfy
fairness
constraints
constrained
ranking
optimization
problem
given
sets
items
property
p1
pp
fairness
constraints
lk
uk
values
wij
find
wij
xij
arg
max
problem
equivalent
finding
maximum
weight
matching
size
satisfies
given
fairness
constraints
weighted
complete
bipartite
graph
now
becomes
non-trivial
complexity
central
object
study
paper
beyond
fairness
ethical
considerations
traditional
diversification
concerns
information
retrieval
query
ambiguity
jaguar
refer
car
animal
user
context
user
want
see
webpages
news
articles
academic
papers
images
can
also
cast
framework
towards
rich
literature
diversifying
rankings
emerged
information
retrieval
high-level
several
approaches
redefine
objective
function
incorporate
notion
diversity
leave
ranking
maximization
problem
unconstrained
common
approach
re-weight
wij
attempt
capture
amount
diversity
item
introduce
position
conditioned
items
placed
positions
see
cg98
zh08
ckc
08
zcl03
zmkl05
casting
directly
unconstrained
multiobjective
optimization
problem
ys17
alternate
approaches
mix
together
aggregate
different
rankings
generated
different
interpretations
query
rbcj09
dkns01
diversity
also
found
desirable
users
ct17
observed
arise
inherently
ranking
determined
user
upvotes
ckk16
despite
efforts
fact
major
search
engines
now
diversify
results
highly
uniform
content
often
still
displayed
certain
image
searches
can
display
results
almost
entirely
attributes
kmm15
gs09
showed
single
diversification
function
can
satisfy
set
natural
axioms
one
want
fair
ranking
essence
tension
relevance
fairness
wij
items
given
property
much
higher
rest
approaches
correct
overrepresentation
hence
reason
cast
problem
constrained
optimization
problem
objective
still
determined
values
solution
space
restricted
fairness
constraints
theoretically
fairness
constraints
come
computational
price
constrained
ranking
maximization
problem
can
seen
generalize
various
np-hard
problems
independent
set
hypergraph
matching
set
packing
unlike
unconstrained
case
even
checking
complete
feasible
ranking
np-hard
consequence
general
hope
produce
solution
violate
constraints
variants
generalizations
problem
studied
tcs
optimization
literature
mention
three
relevant
note
may
leave
empty
positions
ranking
opposed
selecting
elements
rank
desire
afk96
considered
bipartite
perfect
matching
problem
poly
constraints
present
polynomial
time
randomized
algorithm
finds
near
perfect
matching
violates
constraint
additively
grsz14
improved
result
approximation
algorithm
however
running
time
algorithm
2.5
roughly
mk
number
hard
constraints
output
matching
sri95
studied
approximability
packing
integer
program
problem
applied
setting
gives
approximation
algorithm
constrained
ranking
maximization
problem
presented
results
seem
inadequate
number
fairness
constraints
2np
make
running
time
grsz14
large
additive
violation
render
upper-bound
constraints
impotent
main
technical
contributions
paper
fast
exact
approximation
algorithms
constrained
ranking
maximization
problem
along
complementary
hardness
results
together
give
solid
understanding
computational
complexity
problem
overcome
limitations
past
work
constrained
matching
problems
results
often
make
use
two
structural
properties
formulation
set
constraints
can
broken
groups
property
nested
upper-bound
constraints
one
objective
function
satisfies
property
stated
using
properties
obtain
efficient
polynomial
even
linear
time
algorithms
problem
various
interesting
regimes
properties
natural
information
retrieval
setting
useful
algorithmic
contexts
involving
rankings
model
study
following
constrained
ranking
maximization
problem
wij
xij
lk
xij
uk
arg
max
rm
rm
set
matrices
represent
ranking
items
positions
recall
wij
represents
profit
placing
item
position
every
property
every
position
ranking
lk
uk
lower
upper
bound
number
items
property
allowed
top
positions
ranking
example
refer
figure
distinguish
two
important
special
cases
problem
upper-bound
constraints
present
lower-bound
constraints
present
variants
referred
constrained
ranking
maximization
problem
constrained
ranking
maximization
problem
respectively
avoid
confusion
sometimes
add
lu
talking
general
problem
types
constraints
present
furthermore
results
hold
assumption
weight
function
monotone
satisfies
monge
property
whenever
assumptions
necessary
emphasize
fact
saying
general
weights
allowed
results
section
present
overview
results
statements
theorems
informal
ease
readability
formal
statements
deferred
later
part
let
type
ti
item
set
properties
item
first
result
exact
algorithm
solving
constrained
ranking
maximization
problem
whose
running
time
polynomial
number
distinct
ti
denoted
constant
see
theorem
7.1
example
value
matrix
values
corre
optimal
uncon
optimal
con
sponding
optimal
unconstrained
ranking
optimal
constrained
ranking
depicted
gray
orange
respectively
note
clarity
rank
order
transpose
matrix
referred
text
strained
ranking
upper-bound
constraint
position
violated
men
allowed
strained
ranking
upper-bound
constraint
position
longer
violated
fact
constraints
satisfied
figure
simple
example
framework
matrix
wij
presented
options
people
either
male
blue
female
yellow
must
ranked
assume
single
upper-bound
constraint
position
ranking
applied
genders
depicted
figures
constraints
satisfied
latter
former
weights
two
rankings
depicted
figure
theorem
3.1
exact
dynamic
programming-based
algorithm
algorithm
solves
constrained
ranking
maximization
problem
lu
pqnq
pm
time
values
satisfy
property
algorithm
combines
geometric
interpretation
problem
along
dynamic
programming
proceeds
solving
sequence
dimensional
sub-problems
proof
theorem
3.1
provided
section
allowed
large
problem
np-hard
see
theorem
3.5
generally
may
able
assume
constant
even
desirable
algorithms
whose
running
time
close
size
input
towards
consider
natural
parameter
set
properties
size
largest
ti
namely
max
ti
complexity
constrained
ranking
maximization
problem
turns
show
interesting
behavior
respect
note
typically
case
corresponds
simplest
practical
setting
disjoint
properties
properties
partition
set
items
instance
set
images
humans
partitioned
based
ethnicity
age
individual
note
even
though
still
large
previous
theorem
may
prohibitively
large
running
time
prove
constrained
ranking
maximization
problem
lu
polynomial
time
solvable
theorem
3.2
polynomial
time
algorithm
constrained
ranking
maximization
time
values
satisfy
property
problem
lu
can
solved
obtained
reducing
variant
ranking
maximization
problem
minimum
cost
flow
problem
can
solved
efficiently
network
acyclic
note
even
though
running
time
polynomial
might
still
satisfactory
practical
purposes
aim
designing
faster
linear
time
algorithms
focus
case
upper-bound
constraints
present
case
analyze
natural
linear
programming
lp
relaxation
constrained
ranking
maximization
problem
reveals
interesting
structure
problem
motivates
fast
greedy
algorithm
formally
relaxation
considers
set
ωm
defined
ωm
xij
xij
following
linear
program
max
ωm
wij
xij
xx
xij
uk
observe
absence
fairness
constraints
represents
maximum
weight
bipartite
matching
problem
well
known
feasible
region
fractional
relaxation
integral
vertices
hence
optimal
values
two
coincide
however
constrained
setting
even
can
shown
feasible
region
longer
integral
can
fractional
vertices
see
fact
8.2
reason
true
maximizing
linear
objective
results
integral
solution
surprisingly
prove
cost
functions
consider
special
never
yield
optimal
fractional
vertex
solutions
theorem
3.3
exact
lp-based
algorithm
see
theorems
8.1
8.3
consider
linear
programming
relaxation
constrained
ranking
maximization
problem
objective
function
satisfies
exists
optimal
solution
integral
entries
hence
relaxation
exact
exists
greedy
algorithm
find
optimal
integral
solution
np
time
proof
relies
combinatorial
argument
structure
tight
constraints
crucially
uses
assumption
property
objective
function
note
result
theorem
3.3
implies
particular
whenever
linear
program
feasible
also
integer
solution
feasible
ranking
can
also
argued
general
lu
variant
problem
corresponding
lp
relaxation
however
extending
theorem
3.3
case
seems
challenging
left
open
problem
trying
design
algorithms
larger
difficulty
constrained
ranking
feasibility
problem
remains
np-hard
fact
even
hard
approximate
feasibility
guaranteed
see
theorems
10.1
10.2
together
results
imply
unless
restrict
feasible
instances
constrained
ranking
problem
impossible
obtain
reasonable
approximation
algorithm
problem
order
bypass
barrier
focus
variant
problem
present
algorithmically
verifiable
condition
feasibility
argue
natural
context
information
retrieval
consider
set
sk
uk
properties
whose
constraints
increase
least
going
st
kth
position
observe
following
abundance
items
condition
sufficient
feasibility
least
items
ti
sk
intuitively
says
always
least
ways
extend
feasible
ranking
items
ranking
items
simple
examples
show
condition
can
necessary
certain
constraints
uk
practice
assumption
almost
never
problem
available
items
webpages
far
outnumber
size
ranking
number
results
displayed
first
page
number
properties
many
types
webpages
show
assuming
condition
linear-time
algorithm
achieves
approximation
slightly
violating
upper-bound
constraints
result
need
assumption
rather
wij
non-negative
result
near-optimal
provide
log
hardness
approximation
result
see
theorem
10.2
theorem
3.4
approximation
algorithm
see
theorem
9.1
constrained
ranking
maximization
problem
assumption
algorithm
linear
time
outputs
ranking
value
least
times
optimal
one
satisfies
upperbound
constraints
twice
multiplicative
violation
xx
xij
2uk
one
can
construct
artificial
instances
ranking
problem
output
algorithm
indeed
violates
upper-bound
constraints
multiplicative
factor
however
violations
caused
presence
high-utility
items
large
number
properties
items
unlikely
appear
real-life
instances
thus
expect
practical
performance
algorithm
better
worst-case
bound
given
theorem
3.4
suggests
lastly
summarize
hardness
results
constrained
ranking
problem
theorem
3.5
hardness
results
informal
following
variants
constrained
ranking
feasibility
constrained
ranking
maximization
problem
np-hard
deciding
feasibility
case
theorem
10.1
feasibility
condition
approximating
optimal
value
ranking
within
factor
log
theorem
10.2
deciding
feasibility
number
items
number
positions
upper-bounds
given
input
properties
fixed
every
theorem
10.3
every
constant
deciding
whether
exists
feasible
solution
every
solution
violates
constraint
factor
theorem
10.4
related
work
information
retrieval
focuses
selecting
ranking
subsets
data
rich
history
computer
science
well-established
subfield
see
foundational
work
sb88
probability
ranking
principle
prp
forms
foundation
information
retrieval
research
mk60
rob77
context
states
system
ranking
order
items
decreasing
value
problem
formulation
solutions
line
subject
satisfying
diversity
constraints
related
problem
diverse
data
summarization
subset
items
varied
properties
must
selected
large
set
pdsat12
cdkv16
similarly
voting
diversity
constraints
subset
items
people
varied
properties
attributes
must
selected
via
voting
procedure
mon95
chv57
however
formulation
problem
considerably
different
need
produce
ranking
selected
items
hence
analogous
notion
constraints
relaxed
extending
work
fairness
classification
problems
zws
13
fair
ranking
problem
also
studied
unconstrained
multi-objective
optimization
problem
various
fairness
metrics
ranking
proposed
ys17
combining
learning
values
along
ranking
items
also
studied
rkj08
srg13
round
algorithm
chooses
ordered
list
documents
function
estimated
values
wij
can
receive
click
one
clicks
used
update
estimate
wij
bounds
regret
learning
rate
can
given
using
bandit
framework
problem
different
types
items
can
affect
click
probabilities
constraints
displayed
recent
work
shown
many
settings
impossibility
results
prevent
us
attaining
property
item
fairness
kmr17
indeed
work
focuses
ensuring
property
fairness
property
overrepresented
however
comes
expense
item
fairness
depending
properties
item
may
much
higher
lower
probability
displayed
another
item
value
motivating
application
deal
ranking
documents
webpages
hence
satisfied
trade-off
however
consideration
may
required
wish
rank
people
give
individuals
different
likelihoods
near
top
list
based
properties
rather
solely
value
organization
rest
paper
section
discuss
related
work
section
contains
overview
proofs
main
results
section
contains
proof
theorem
polynomial
time
algorithm
case
proof
theorem
3.1
exact
algorithm
general
presented
section
section
contains
proof
theorem
3.3
shows
exists
integral
solution
also
provides
simple
fast
greedy
algorithm
ranking
maximization
problem
section
contains
proof
theorem
3.4
gives
approximate
result
ranking
maximization
problem
general
hardness
results
presented
section
10
section
11
provide
discussion
possible
directions
future
work
open
problems
finally
appendix
give
brief
overview
common
ranking
metrics
explain
can
captured
values
wij
satisfy
proof
overviews
overview
proof
theorem
3.1
first
observe
constrained
ranking
maximization
problem
simple
geometric
interpretation
every
item
can
assigned
property
vector
ti
whose
th
entry
item
property
otherwise
can
think
constrained
ranking
pk
maximization
problem
finding
sequence
distinct
items
i1
i2
lk
tij
uk
uk
vector
whose
th
entry
words
require
partial
sums
vectors
corresponding
top
items
ranking
stay
within
region
lk1
uk1
lk2
uk2
lkn
ukn
defined
fairness
constraints
let
ti
set
different
property
vectors
ti
appear
items
let
us
denote
elements
v1
v2
vq
simple
important
observation
whenever
two
items
i1
i2
say
i1
i2
property
vector
ti1
ti2
every
optimal
solution
either
i1
will
ranked
i2
i1
ranked
neither
used
follows
assumption
weight
matrix
monotone
satisfies
property
stated
let
us
now
define
following
sub-problem
asks
property
vectors
feasible
solution
given
tuple
s1
s2
sq
nq
s1
s2
sq
optimal
way
obtain
feasible
ranking
items
sj
property
vector
equal
vj
given
solution
sub-problem
using
observation
easy
determine
items
used
given
property
vector
order
one
can
easily
solve
sub-problem
given
solutions
smaller
sub-problems
smaller
sum
sj
resulting
dynamic
programming
algorithm
nq
states
hence
roughly
running
time
overview
proof
theorem
3.2
main
idea
reduce
ranking
maximization
minimum
cost
flow
problem
observe
several
structural
properties
resulting
time
instance
allow
one
solve
efficiently
given
instance
constrained
ranking
maximization
problem
construct
weighted
flow
network
every
feasible
ranking
corresponds
feasible
flow
value
roughly
every
property
chain
vertices
constructed
placing
item
position
corresponds
sending
one
unit
flow
chain
corresponding
item
kth
vertex
sending
flow
sink
edge
weights
gadgets
chains
chosen
way
cost
sending
unit
path
wi
capacities
chains
corresponding
properties
implement
upper-bound
constraints
lower-bound
constraints
can
also
enforced
putting
appropriate
weights
edges
chains
instance
minimum
cost
flow
problem
construct
np
vertices
nm
edges
acyclic
allows
replace
application
bellman-ford
algorithm
first
phase
successive
shortest
path
algorithm
linear-time
procedure
easily
leads
implementation
n2
log
time
overview
proof
theorem
3.3
unlike
case
lp-relaxation
non-integral
vertex
assignment
polytope
even
fractional
vertices
can
arise
see
fact
8.2
theorem
3.3
implies
although
feasible
region
integral
directions
along
directions
interest
proof
first
reduce
problem
case
one
rank
items
strict
form
property
inequalities
assumption
strict
strategy
prove
every
fractional
feasible
solution
ωm
direction
rm
solution
x0
εy
still
feasible
weight
larger
weight
implies
every
optimal
solution
necessarily
integral
combinatorially
directions
consider
correspond
cycles
underlying
complete
bipartite
graph
weight
matching
can
improved
swapping
edges
along
cycle
argument
shows
existence
cycle
makes
use
special
structure
constraints
family
instances
illustrate
approach
suppose
exist
two
items
i1
i2
property
ranking
positions
j1
j2
xi1
j2
xi2
j1
following
strategy
outlined
consider
x0
εy
rm
zero
everywhere
10
except
yi1
j1
yi2
j2
yi1
j2
yi2
j1
like
prove
weight
x0
larger
weight
x0
feasible
possibly
small
reason
gain
moving
direction
follows
property
feasibility
turn
follows
orthogonal
every
constraint
defining
feasible
region
indeed
constraints
involving
items
i1
i2
corresponding
property
every
constraint
form1
h1rk
xi
uk
1rk
indicator
vector
rectangle
rk
rectangle
contains
either
non-zero
entries
two
non-zero
entries
opposite
signs
none
cases
h1rk
yi
using
reasoning
one
can
show
configuration
form
can
appear
optimal
solution
i1
i2
share
property
implies
support
every
optimal
solution
certain
structure
restricted
items
given
property
structure
allows
us
find
improvement
direction
case
solution
integral
prove
integrality
show
every
fractional
solution
rm
exists
fractional
entry
xij
can
slightly
increased
without
violating
fairness
constraints
moreover
since
i-th
row
j-th
column
must
contain
least
one
fractional
entry
since
row
column-sums
can
construct
direction
along
weight
can
increased
choice
corresponding
entries
altered
requires
care
otherwise
might
end
violating
fairness
constraints
second
part
theorem
3.3
algorithm
solving
constrained
ranking
maximization
problem
optimal
input
size
running
time
np
show
natural
greedy
algorithm
can
used
precisely
one
iteratively
fills
ranking
positions
always
selecting
highest
value
item
still
available
lead
constraint
violation
inductive
argument
based
relies
property
assumption
gives
correctness
procedure
overview
proof
theorem
3.4
let
arbitrary
important
part
algorithm
greedy
procedure
finds
large
weight
solution
slightly
relaxed
problem
positions
ranking
occupied
processes
pairs
non-increasing
order
weights
wij
puts
item
position
whenever
lead
constraint
violation
analyze
approximation
guarantee
algorithm
let
us
first
inspect
combinatorial
structure
feasible
set
total
fairness
constraints
problem
additionally
matching
constraints
saying
column
row
can
single
one
solution
matrix
however
relaxing
problem
one
ranking
positions
filled
one
can
observe
feasible
set
just
intersection
matroids
common
ground
set
indeed
two
correspond
matching
constraints
partition
matroids
remaining
matroids
correspond
properties
every
property
chain
subsets
s1
s2
sn
sk
uk
set
independent
sets
laminar
matroid
work
jen76
shown
greedy
algorithm
run
intersection
matroids
yields
k-approximation
hence
approximation
algorithm
follows
obtain
better
approximation
bound
careful
analysis
required
proof
based
fact
roughly
new
element
added
feasible
solution
elements
need
removed
make
feasible
thus
adding
greedily
denote
inner
product
two
matrices
rm
hx
yi
11
pm
pn
xij
yij
one
element
can
cost
us
absence
elements
weight
one
added
idea
can
formalized
used
prove
approximation
greedy
algorithm
akin
framework
k-extendible
systems
mes06
greedy
procedure
can
alternatively
analyzed
finally
observe
since
problem
solved
relaxation
original
ranking
maximization
problem
approximation
ratio
obtain
respect
original
problem
still
remains
complete
ranking
filling
gaps
may
left
procedure
can
achieved
greedy
manner
increases
value
solution
violates
constraints
multiplicative
factor
overview
proof
theorem
3.5
hardness
results
based
general
observation
one
can
encode
various
types
packing
constraints
using
instances
constrained
ranking
maximization
feasibility
problem
first
result
theorem
10.1
np-hardness
feasibility
problem
established
reduction
hypergraph
matching
problem
given
instance
hypergraph
matching
problem
one
can
think
hyperedges
items
vertices
properties
degree
constraints
vertices
can
encoded
upper-bound
constraints
number
items
certain
property
ranking
inapproximability
result
theorem
10.2
also
established
reduction
hypergraph
matching
problem
however
case
one
needs
careful
reduction
required
output
instances
feasible
next
hardness
result
theorem
10.3
illustrates
difficulty
constrained
ranking
optimization
problem
entirely
due
upper-bound
numbers
uk
particular
even
part
input
corresponding
item
property
fixed
depends
hence
can
pre-processed
fj12
problem
remains
hard
proven
via
reduction
independent
set
problem
properties
consists
pairs
items
i1
i2
i1
i2
given
graph
vertices
can
set
constrained
ranking
problem
whose
solutions
independent
sets
certain
size
since
every
edge
i1
i2
property
can
set
constraint
allows
one
item
vertex
property
edge
ranking
finally
theorem
10.4
states
hard
decide
feasibility
even
find
solution
violate
constraint
constant
multiplicative
factor
obstacle
proving
hardness
result
typically
even
given
instance
infeasible
easy
find
solution
violates
many
constraints
small
amount
overcome
problem
employ
inapproximability
result
maximum
independent
set
problem
has96
idea
ck05
reduction
roughly
puts
constraint
every
clique
input
graph
one
vertex
item
picked
solution
violate
constraint
multiplicative
factor
corresponds
set
vertices
induced
subgraph
c-clique
property
allows
us
prove
using
elementary
bounds
ramsey
numbers
large
independent
set
hence
given
algorithm
able
find
feasible
ranking
c-factor
violation
constraints
can
approximate
maximum
size
independent
set
graph
factor
roughly
hard
has96
polynomial
time
algorithm
proof
theorem
3.2
show
solve
constrained
ranking
maximization
problem
reformulating
minimum
cost
flow
problem
directed
network
clarity
begin
case
upper-bound
constraints
present
modify
12
construction
deal
lower-bounds
well
given
instance
constrained
ranking
maximization
problem
build
directed
weighted
capacitated
graph
solution
min
cost
flow
problem
allows
us
solve
instance
ranking
problem
two
special
vertices
source
sink
respectively
every
position
ranking
vertex
γk
corresponding
every
property
vertices
thus
total
np
vertices
proceed
describing
edges
every
position
edge
γk
unit
capacity
zero
cost
every
property
every
position
edge
γk
unit
capacity
zero
cost
finally
vertices
arranged
directed
chain
describe
corresponding
edges
let
us
denote
items
property
increasing
order
i1
i2
i3
number
items
property
vertex
connected
edges
one
item
property
unit
capacity
costs
zero
every
exactly
edges
going
unit
capacity
costs
follows
wi1
wi1
wi2
wi2
wiu
wiu
define
wi
every
item
idea
behind
construction
sending
one
unit
flow
position
way
position
incurs
cost
negative
wi1
corresponds
placing
i1
best
item
property
position
flow
sent
γk
guarantees
position
ranking
used
twice
thus
every
flow
value
corresponds
feasible
ranking
cost
negative
total
weight
given
ranking
similarly
optimal
ranking
flow
value
corresponding
now
prove
intuitions
formally
rankings
flows
show
optimal
ranking
can
translated
feasible
flow
value
cost
nk
wπ
let
us
start
simple
observation
every
property
relative
order
appearance
items
property
consistent
ordering
indices
i1
i2
i3
follows
monge
property
satisfied
swapping
items
incostistent
pair
cause
ranking
higher
total
weight
see
proof
theorem
7.1
details
construct
feasible
flow
scan
ranking
top
bottom
add
one
flow
path
time
suppose
item
placed
position
let
unique
property
item
send
one
unit
flow
along
following
path
γk
pick
edges
path
correspond
item
possible
observation
cost
contributed
path
wi
wi
wi
wi
wi
wi
wi
thus
total
cost
nk
wπ
claimed
remains
observe
flow
indeed
feasible
since
construction
capacities
along
chains
correspond
upper
bound
constraints
13
figure
illustration
graph
chain
corresponding
property
connected
γ-vertices
note
number
edges
hence
might
grow
γ1
γ2
γn
flows
ranking
suppose
feasible
flow
value
cost
cost
show
feasible
ranking
weight
least
cost
attempt
constructing
ranking
let
us
first
modify
flow
force
certain
structure
consider
property
position
ranking
units
flow
sent
will
assume
go
edges
smallest
cost
words
i1
i2
i3
items
property
increasing
order
edges
pick
costs
wi1
wi1
wi2
wi2
wic
wic
fact
edges
smallest
cost
follows
monge
property
given
structured
flow
can
easily
construct
ranking
weight
suppose
units
flow
entering
chain
leaving
vertices
γk1
γk2
γkc
set
k1
i1
k2
i2
kc
ic
i1
i2
ic
best
items
property
cost
part
flow
corresponding
wi1
k1
wi2
k2
wic
kc
pn
total
wπ
feasibility
ranking
follows
fact
units
flow
reach
thus
many
items
property
ranked
top-k
positions
far
reduction
captures
variant
ranking
problem
deal
lowerbounds
will
slightly
modify
edge
costs
constructed
flow
network
end
introduce
number
large
significantly
larger
entry
weight
matrix
property
position
ranking
modify
costs
edges
wi1
wi1
wil
wil
wil
wil
wiu
wiu
smallest
cost
edges
cost
decreased
can
now
make
large
force
edges
sent
flow
total
negative
cost
14
thus
particular
minimum
cost
flow
still
corresponds
feasible
rank
ing
exists
weight
optimal
ranking
recovered
cost
solve
constructed
instance
minimum
cost
flow
note
first
network
contain
negative-cost
cycle
fact
acyclic
sufficient
condition
problem
polynomial-time
solvable
one
can
use
successive
shortest
augmenting
paths
algorithm
see
amo93
solve
problem
efficiently
initial
computation
node
potentials
one
need
use
bellman-ford
algorithm
running
time
pmn2
take
advantage
fact
acyclic
compute
single
source
shortest
paths
sorting
vertices
topologically
running
simple
dynamic
programming
procedure
algorithm
needs
augment
flow
times
augmentation
requires
run
dijkstra
algorithm
takes
log
mn
log
time
thus
total
running
time
algorithm
nm
mn
log
n2
log
dynamic
programming-based
exact
algorithm
recall
instance
constrained
ranking
maximization
every
item
type
ti
assigned
set
properties
item
section
present
exact
dynamic
programming
algorithm
solving
constrained
ranking
maximization
problem
efficient
number
distinct
types
instance
small
start
providing
geometric
viewpoint
problem
arguably
makes
easier
visualize
provides
us
convenient
notation
dynamic
programming
algorithm
simpler
state
understand
7.1
geometric
interpretation
fairness
constraints
recall
instance
constrained
ranking
maximization
given
items
ranking
positions
properties
together
fairness
constraints
let
ti
1ti
vector
indicating
sets
item
belongs
call
type
note
every
ranking
can
described
either
binary
matrix
xij
item
ranked
position
alternatively
one-to-one
function
item
ranked
position
every
using
latter
convention
can
encode
fairness
condition
lk
tπ
uk
lk
lk1
lk2
lkp
uk
uk1
uk2
ukp
vectors
lower
upperbounds
position
words
ranking
feasible
kth
partial
sum
ti
vectors
items
top-k
positions
belongs
rectangle
lk1
uk1
lk2
uk2
lkp
ukp
every
7.2
dynamic
programming
algorithm
theorem
7.1
algorithm
solves
constrained
ranking
maximization
problem
lu
objective
function
satisfies
property
mp
pqnq
time
number
different
types
items
15
proof
convenient
assume
matrix
satisfies
strict
variant
property
inequalities
strict
general
case
follows
analogous
argument
item
recall
ti
1ti
vector
indicating
sets
item
belongs
let
ti
set
realized
types
denote
elements
v1
v2
vq
every
define
ti
let
every
denote
i1
i2
iq
list
items
increasing
order
note
optimal
solution
ranking
maximization
problem
exactly
items
come
items
exactly
i1
appear
increasing
order
solution
follows
property
follows
suppose
item
i1
placed
position
j2
item
i2
placed
position
j1
i1
i2
j1
j2
swapping
two
items
ranking
affect
feasibility
solution
difference
value
wi1
j1
wi2
j2
wi1
j2
wi2
j1
positive
due
strict
property
hence
swap
can
increase
weight
solution
similar
reasoning
shows
beneficial
swap
ranked
item
i2
unranked
item
i1
whenever
i1
i2
one
consequences
observations
can
assume
hence
nq
can
keep
best
items
every
set
discard
remaining
ones
will
part
optimal
solution
discarding
can
done
time
roughly
instance
given
allows
us
reduce
number
candidate
rankings
one
check
roughly
however
number
still
prohibitively
large
many
scenarios
interest
construct
dynamic
programming
algorithm
much
fewer
states
nqp
now
consider
following
sub-problem
tuple
s1
s2
sq
nq
let
s1
s2
sq
largest
weight
feasible
ranking
top-k
positions
occupied
exactly
items
picked
every
let
us
now
describe
algorithm
computing
s1
s2
sq
first
initialize
entries
s1
s2
sq
set
next
consider
valid
tuples
s1
s2
sq
order
increasing
values
suppose
like
compute
s1
s2
sq
first
one
must
check
whether
fairness
constraint
position
satisfied
calculate
note
th
coordinate
represents
number
items
property
hence
necessary
condition
tuple
s1
s2
sq
represent
feasible
ranking
lk
uk
satisfied
just
set
s1
s2
sq
otherwise
consider
possibilities
type
item
placed
last
position
suppose
type
belongs
s1
s2
sq
s1
sq
wik
hence
order
compute
s1
s2
sq
simply
iterate
possible
types
find
maximum
value
can
get
correctness
follows
fact
th
item
type
every
optimal
ranking
always
total
number
sub-problems
hence
algorithm
can
implemented
time
nq
time
required
read
input
construct
16
list
elements
every
given
type
second
term
nq
appears
nq
subproblems
sub-problem
considers
cases
every
case
feasibility
check
takes
time
algorithms
upper-bound
constraints
8.1
integrality
lp
solutions
theorem
8.1
consider
lp
relaxation
constrained
ranking
maximization
problem
properties
p1
pp
pairwise
disjoint
rm
satisfies
exists
optimal
integral
solution
proof
without
loss
generality
can
assume
via
simple
extension
problem
follows
extend
matrix
rm
square
matrix
rm
setting
wij
eij
every
set
uk
constraint
imposed
positions
note
still
satisfies
property
moreover
every
solution
ωm
original
problem
can
extended
solution
ωm
preserving
weight
xi
hw
ei
denotes
inner
product
two
matrices
hw
xi
pm
pm
hw
similarly
every
solution
extended
problem
restricted
first
ij
ij
columns
yields
solution
original
problem
weight
thus
suffices
prove
extended
problem
optimal
integral
solution
remainder
section
assume
simplicity
assume
matrix
satisfies
strict
variant
property
inequalities
strict
can
achieved
small
perturbation
weights
without
changing
optimal
ranking
proof
consist
two
phases
first
phase
show
every
optimal
solution
satisfies
certain
property
support
second
phase
show
optimal
solution
property
can
fractional
entries
let
us
state
property
feasible
solution
ωm
like
establish
i1
i2
j1
j2
i1
i2
j1
j2
xi2
j1
xi1
j2
words
whenever
two
items
i1
i2
property
i1
i2
i1
better
i2
position
j1
j2
j1
j2
xi2
j1
xi1
j2
positive
show
satisfy
condition
optimal
end
take
fractional
solution
i1
i2
j1
j2
condition
hold
now
consider
solution
form
x0
i1
j1
i2
j2
i1
j2
i2
j1
rm
denotes
matrix
single
non-zero
entry
value
since
xi1
j2
xi2
j1
can
find
x0
furthermore
pn
claim
solution
still
feasible
indeed
every
item
yij
can
conclude
x0ij
17
xij
pm
similarly
every
rank
position
xi
xi
hence
ωm
remains
show
x0
satisfies
fairness
constraints
note
enough
consider
fairness
constraints
coming
property
i1
i2
i1
i2
variables
xi1
j1
xi1
j2
xi2
j1
xi2
j2
appear
constraints
every
constraint
form
h1rk
xi
uk
1rk
indicator
vector
matrix
rectangle
submatrix
since
h1rk
yi
every
rectangle
1rk
x0
h1rk
εyi
h1rk
xi
uk
therefore
x0
feasible
furthermore
strict
property
x0
hw
xi
wi1
j1
wi2
j2
wi1
j2
wi2
j1
hw
xi
feasible
solution
strictly
better
objective
value
conclude
optimal
hence
every
optimal
solution
necessarily
satisfies
suppose
now
sake
contradiction
satisfies
integral
consider
fractional
entry
xi0
j0
i0
small
possible
case
tie
j0
small
possible
suppose
item
i0
belongs
note
exists
entry
i0
j1
j1
j0
xi0
j1
due
fact
i0
j0
xi0
xi0
j0
fix
smallest
possible
j1
property
constraint
xij0
exists
least
one
fractional
entry
j0
th
column
let
us
call
xi1
j0
follows
i1
i0
note
also
i1
i1
condition
violated
let
us
consider
new
candidate
solution
using
indices
defined
x0
i1
j1
i2
j2
i1
j2
i2
j1
show
x0
feasible
contradicts
fact
optimal
strict
version
property
suffices
ensure
x0
violate
fairness
constraints
imposed
property
note
j0
j0
j1
constraints
xx
xx
xij
uk
x0ij
remain
satisfied
hence
remains
show
constraint
kj
xij
uk
tight
j0
j0
j1
observe
choice
i0
j0
entries
rectangle
j0
integral
furthermore
rectangle
j0
j0
j1
non-zero
entry
xi0
j0
due
fact
xi0
j1
condition
satisfied
now
uk
kj
xij
constraint
tight
thus
x0
feasible
hence
optimal
solution
hence
optimal
solution
fractional
entries
contrast
theorem
vertices
feasible
region
might
non-integral
fact
8.2
exists
instance
ranking
maximization
problem
feasible
region
fractional
vertices
18
proof
let
suppose
one
property
p1
constraints
u21
uk1
words
constrain
ranking
element
property
top-2
entries
consider
following
point
clearly
feasible
observe
support
2n
elements
exactly
many
linearly
independent
tight
constraints
point
indeed
doubly-stochastic
constraints
give
us
2n
constraints
2n
linearly
independent
remaining
one
x1
x1
x2
x2
therefore
non-integral
vertex
feasible
region
8.2
fast
greedy
algorithm
due
special
structure
able
find
fast
simple
algorithm
ranking
maximization
problem
case
theorem
8.3
exists
algorithm
given
instance
constrained
ranking
maximization
problem
objective
function
satisfies
property
outputs
optimal
ranking
time
proof
simplicity
assume
satisfies
strict
variant
property
strict
inequalities
definition
can
assumed
without
loss
generality
slightly
perturbing
consider
following
greedy
algorithm
iteratively
constructs
ranking
item
ranked
position
let
smallest
index
item
yet
picked
can
added
position
without
violating
constraint
output
infeasible
set
output
clear
algorithm
outputs
ranking
feasible
assume
now
indeed
outputs
ranking
will
show
optimal
take
optimal
ranking
let
property
let
i1
i2
list
items
increasing
order
claim
ranks
exactly
items
i1
i2
ir
order
note
swapping
two
elements
say
i1
i2
positions
j2
j1
ranking
say
j1
j2
change
weight
equal
wi1
j1
wi2
j2
wi1
j2
wi2
j1
alternate
notation
makes
exposition
section
cleaner
see
also
notation
problem
formulation
section
7.1
19
strict
property
hence
always
beneficial
rank
items
increasing
order
furthermore
can
argued
using
monotonicity
always
optimal
select
items
smallest
indices
ranking
one
consequences
observations
can
assume
hence
np
can
keep
best
items
property
discard
remaining
ones
will
part
optimal
solution
discarding
can
done
time
time
instance
given
observation
allows
us
now
prove
optimality
greedy
strategy
take
largest
number
agree
nothing
prove
let
us
assume
ia
io
two
cases
either
ia
ranked
first
case
let
position
ia
clearly
let
ranking
identical
positions
swapped
claim
still
feasible
larger
weight
claim
weights
follows
easily
strict
property
let
us
now
reason
feasibility
let
property
ia
ia
let
total
number
elements
property
top
positions
equivalently
note
swap
violated
constraint
corresponding
since
ia
know
similarly
uk
uk
un
previous
observation
item
ranked
position
reason
fairness
constraints
corresponding
satisfied
elements
property
top-k
items
second
case
similar
one
can
reason
ia
included
ranking
changing
kth
position
ia
obtain
ranking
still
feasible
larger
value
hence
contradicts
optimality
thus
optimal
ranking
argument
one
can
show
instance
feasible
greedy
algorithm
will
never
fail
output
solution
report
infeasibility
let
us
now
discuss
briefly
running
greedy
algorithm
every
property
can
maintain
ordered
list
elements
yet
picked
solution
count
items
property
already
part
solution
every
ranking
position
just
need
look
first
element
every
list
one
will
best
feasible
item
counters
can
check
feasibility
time
can
also
update
lists
counters
per
rank
position
reason
every
rank
position
handled
time
note
also
beginning
lists
can
constructed
total
time
since
can
go
items
reverse
order
place
every
item
beginning
suitable
list
time
hence
total
running
time
approximation
algorithm
theorem
9.1
exists
linear
time
algorithm
given
instance
constrained
ranking
maximization
problem
satisfying
condition
outputs
ranking
whose
weight
least
times
optimal
one
satisfies
fairness
constraints
factor
xx
xi
2uk
proof
algorithm
can
divided
two
phases
first
construct
partial
ranking
may
leave
positions
empty
refine
yield
complete
ranking
20
first
phase
finding
close
optimal
solution
following
integer
program
max
xij
wij
xx
xij
uk
set
xij
xij
note
relaxation
problem
require
every
position
ranking
filled
proof
will
often
refer
pair
cell
since
treat
entries
dimensional
array
consider
following
greedy
algorithm
can
used
find
likely
non-optimal
integral
solution
problem
order
cells
according
non-increasing
values
wij
set
zij
process
cells
one
one
adding
solution
cause
constraint
violation
set
zij
otherwise
move
next
cell
times
claim
solution
given
algorithm
value
least
optimal
solution
words
zij
wij
opt
opt
denotes
optimal
solution
prove
let
us
denote
i1
j1
i2
j2
jn
set
cells
picked
algorithm
order
added
solution
let
also
sr
i1
j1
i2
j2
ir
jr
denote
optr
optimal
solution
condition
cells
sr
part
solution
words
additional
constraint
xij
sr
claim
every
holds
10
optr
optr
wir
jr
21
note
given
10
claim
follows
easily
indeed
opt
opt0
opt0
opt1
wi1
j1
opt2
wi1
j1
wi2
j2
optn
ir
jr
wir
jr
last
equality
follows
fact
sn
maximal
solution
extended
hence
indeed
optn
zij
wij
ir
jr
thus
remains
prove
10
take
consider
optimal
solution
set
cells
contains
sr
thus
wij
optr
ir
jr
done
10
follows
straightforwardly
otherwise
consider
00
ir
jr
claim
set
cells
sr
00
feasible
relaxed
problem
implies
10
sr
00
every
cell
weight
wij
wir
jr
construct
pick
cell
lying
column
ir
jr
cell
lying
row
ir
jr
exist
add
make
sure
00
one
cell
every
row
every
column
now
consider
property
fairness
constraints
might
violated
00
necessarily
tir
moreover
laminar
matroid
structure
constraints
corresponding
single
property
one
can
find
cell
sr
00
satisfies
fairness
constraints
property
thus
adding
one
cell
whenever
exists
every
property
tir
obtain
set
cells
00
feasible
concludes
proof
algorithm
finds
approximation
integer
program
let
us
now
show
construct
full
ranking
let
zij
zij
will
construct
new
solution
supported
one
every
row
column
exactly
one
every
column
satisfies
fairness
constraints
note
define
properties
claimed
theorem
statement
indeed
pm
every
xx
xx
xij
zij
yij
xx
xij
uk
uk
22
xx
yij
approximation
guarantee
follows
nonnegative
contribution
total
weight
guarantee
respect
relaxed
problem
whose
optimal
value
upperbound
optimal
value
ranking
maximization
problem
hence
remains
find
properties
can
construct
using
another
greedy
procedure
let
process
elements
one
time
increasing
order
considering
given
pick
adding
solution
introduce
fairness
constraint
violation
clear
algorithm
succeeds
find
suitable
every
step
succeeds
construct
solution
required
properties
remains
show
indeed
case
end
fix
look
step
considered
condition
know
least
elements
can
placed
position
without
violating
constraint
elements
may
already
taken
algorithm
added
new
solution
however
begin
least
one
remains
can
selected
concludes
proof
correctness
procedure
remains
observe
phases
algorithm
simple
preprocessing
can
implemented
linear
time
10
hardness
results
section
state
prove
hardness
results
regarding
constrained
ranking
feasibility
maximization
problems
variant
since
proofs
involve
hypergraph
matching
problem
let
us
define
concept
formally
hypergraph
pair
composed
vertex
set
hyperedge
set
given
call
hypergraph
every
hyperedge
cardinality
hypergraph
matching
following
decision
problem
given
hypergraph
number
decide
whether
exists
set
pairwise
disjoint
hyperedges
set
called
matching
optimization
variant
problem
asks
largest
cardinality
matching
name
intended
suggestive
recall
context
constrained
ranking
feasibility
maximization
problem
parameter
maximum
number
properties
given
item
first
hardness
result
states
even
small
constrained
ranking
feasibility
hard
theorem
10.1
constrained
ranking
feasibility
problem
np-hard
proof
present
reduction
hypergraph
matching
known
np-hard
let
hypergraph
let
number
want
test
whether
matching
size
construct
instance
constrained
ranking
problem
whose
feasibility
equivalent
matching
cardinality
follows
let
number
hyperedges
indexed
e1
e2
em
let
number
vertices
indexed
v1
v2
vp
set
number
items
ranking
problem
ith
item
corresponds
edge
ei
set
number
positions
ranking
every
vertex
introduce
property
follows
ei
thus
properties
note
hyperedge
ei
contains
vertices
ti
items
desired
every
let
uk
23
remains
argue
matching
cardinality
instance
constrained
ranking
problem
feasible
matching
cardinality
let
ei
define
ranking
taking
elements
order
since
matching
every
vertex
belongs
one
hyperedge
thus
every
property
hence
fairness
constraints
satisfied
similarly
reasoning
opposite
direction
feasible
ranking
yields
matching
cardinality
follows
letting
set
hyperedges
corresponding
items
ranked
one
possibility
feasibility
problem
makes
hard
however
case
next
theorem
says
even
guarantee
feasibility
via
assumption
problem
remains
hard
approximate
theorem
10.2
feasible
constrained
ranking
maximization
problem
satisfies
condition
weights
satisfy
property
np-hard
approximate
within
factor
log
proof
proof
will
use
fact
maximum
hypergraph
matching
problem
hard
approximate
within
factor
log
hss03
present
approximation-preserving
reduction
maximum
hypergraph
matching
problem
proof
similar
theorem
10.1
however
must
now
ensure
resulting
instance
feasible
satisfies
condition
hypergraph
vertices
v1
v2
vp
hyperedges
e1
e2
em
construct
instance
constrained
ranking
maximization
problem
follows
let
m0
2m
number
items
let
number
positions
ranking
items
correspond
edges
e1
e2
em
remaining
items
2m
call
improper
items
proof
theorem
10.1
every
vertex
define
property
ei
fairness
constraints
defined
upper-bounds
uk
improper
items
belong
property
hence
condition
satisfied
furthermore
can
never
cause
fairness
constraint
violated
lastly
let
wij
2m
note
matrix
satisfies
property
every
matching
cardinality
corresponds
feasible
ranking
total
weight
instance
ranking
maximization
simply
take
items
corresponding
edges
matching
add
improper
items
similarly
every
ranking
weight
can
transformed
matching
size
reduction
approximation
preserving
conclude
constrained
ranking
maximization
problem
np-hard
approximate
within
factor
better
log
next
result
says
constrained
ranking
feasibility
hard
even
fix
structure
set
properties
input
problem
upper-bound
constraints
theorem
10.3
exists
fixed
family
properties
pm
pm
pm
m2
problem
given
matrix
upper-bound
values
nn
pm
check
whether
constrained
ranking
instance
defined
pm
feasible
np-hard
proof
let
family
properties
pm
element
subsets
pm
i1
i2
i1
i2
i1
i2
24
reduce
independent
set
problem
problem
constrained
ranking
maximization
fixed
property
set
consider
instance
independent
set
problem
graph
underlying
question
independent
set
size
construct
corresponding
instance
constrained
ranking
maximization
follows
number
ranking
positions
items
rank
one
every
vertex
thus
property
pair
vertices
every
edge
i1
i2
set
fairness
constraint
restricts
number
items
property
top-n
positions
un
words
one
item
i1
i2
can
appear
ranking
non-edges
leave
upper-bound
constraint
corresponding
property
unspecified
equivalently
let
uk
i1
i2
clearly
feasible
rankings
one-to-one
correspondence
independent
sets
size
indeed
place
items
vertices
independent
set
size
ranking
order
resulting
ranking
feasible
essential
constraints
imposed
ranking
every
edge
i1
i2
one
i1
i2
present
ranking
conversely
constraints
satisfied
set
items
placed
ranking
forms
independent
set
size
independent
set
problem
np-hard
via
reduction
obtain
hardness
constrained
ranking
maximization
problem
fixed
properties
lastly
one
hope
still
possible
solve
constrained
ranking
maximization
problem
allowing
constraints
violated
small
amount
however
also
remains
hard
result
states
finding
solution
violates
constraints
factor
constant
np-hard
interestingly
proof
relies
certain
bound
ramsey
theory
theorem
10.4
every
constant
following
violation
gap
variant
constrained
ranking
feasibility
problem
np-hard
output
yes
input
instance
satisfiable
output
solution
violates
every
upper-bound
constraint
times
proof
reduction
inspired
idea
developed
approximation
hardness
packing
integer
programs
ck05
use
inapproximabality
independent
set
has96
zuc07
prove
theorem
states
approximating
cardinality
maximum
independent
set
undirected
graph
within
factor
np-hard
every
constant
fix
constant
without
loss
generality
assume
consider
following
reduction
given
instance
independent
set
problem
graph
number
goal
check
whether
independent
set
size
let
set
items
number
positions
ranking
every
clique
cardinality
add
new
property
set
upper-bound
number
elements
top-n
positions
ranking
un
note
mc
poly
constraints
claim
following
ranking
violates
constraints
factor
independent
set
cardinality
feasible
ranking
independent
set
cardinality
25
note
proving
suffices
obtain
desired
result
procedure
solve
constrained
ranking
feasibility
problem
one
approximate
polynomial
time
cardinality
maximum
independent
set
graph
approximation
ratio
possible
unless
has96
zuc07
hence
remains
establish
claim
establish
second
claim
note
every
independent
set
size
gives
feasible
solution
constrained
ranking
instance
placing
items
corresponding
ranking
order
establish
first
claim
suppose
solution
violates
every
constraint
factor
means
subset
containing
vertices
contain
clique
using
standard
upper-bound
ramsey
number
follows
subgraph
induced
exists
independent
set
cardinality
n1
11
discussion
future
work
paper
motivated
controlling
alleviating
algorithmic
bias
information
retrieval
initiate
study
complexity
natural
constrained
optimization
problem
concerning
rankings
results
indicate
constrained
ranking
maximization
problem
generalization
classic
bipartite
matching
problem
shows
fine-grained
complexity
structure
constraints
numbers
appearing
upper-bounds
play
role
determining
complexity
moreover
problem
generalizes
several
hypergraph
matching
packing
problems
algorithmic
results
bypass
obstacles
implicit
past
theory
work
leveraging
structural
properties
constraints
common
objective
functions
information
retrieval
generally
results
contribute
growing
set
algorithms
counter
algorithmic
bias
fundamental
problems
dhp
12
bs15
zvgrg15
cdkv16
cks
18
cdk
17
kir16
cv17
structural
insights
obtained
may
find
use
algorithmic
settings
related
rather
broad
scope
ranking
problems
work
also
suggests
open
problems
directions
first
question
concerns
time
can
case
lu
variant
theorem
3.2
implies
can
solved
improved
nearly-linear
time
variant
theorem
3.3
another
question
complexity
constrained
ranking
maximization
problem
different
variants
various
constants
appearing
approximation
algorithms
unlikely
optimal
improving
remains
important
particular
approximation
algorithm
case
large
theorem
3.4
may
incur
multiplicative
violation
constraints
significant
dealing
instances
upper
bound
constraints
rather
large
uk
k2
case
violation
effectively
erases
constraints
interesting
open
problem
understand
whether
violation
can
avoided
either
providing
different
algorithm
making
different
assumptions
instance
work
consider
linear
objective
functions
ranking
optimization
problem
objective
independent
sum
profits
individual
item
placements
model
might
appropriate
certain
settings
may
cases
one
prefer
measure
quality
ranking
whole
particular
utility
placing
given
item
kth
position
also
depend
items
placed
zcl03
thus
defining
studying
suitable
variant
problem
class
objectives
rankings
satisfy
version
diminishing
returns
principle
submodularity
practical
interest
related
question
deserves
independent
exploration
study
complexity
sampling
constrained
ranking
probability
distribution
induced
objective
rather
26
outputting
ranking
maximizes
value
output
ranking
probability
proportional
value
finally
extending
results
online
setting
seems
like
important
technical
challenge
also
likely
practical
consequences
acknowledgments
like
thank
mohit
singh
rico
zenklusen
valuable
discussions
problem
references
afk96
sanjeev
arora
alan
frieze
haim
kaplan
new
rounding
procedure
assignment
problem
applications
dense
graph
arrangement
problems
37th
annual
symposium
foundations
computer
science
focs
96
burlington
vermont
usa
14
16
october
1996
pages
21
30
1996
amo93
ravindra
ahuja
thomas
magnanti
james
orlin
network
flows
theory
algorithms
applications
prentice-hall
inc
upper
saddle
river
nj
usa
1993
bae16
drake
baer
filter
bubble
explains
trump
won
didn
see
coming
november
2016
ny
mag
bcz
16
tolga
bolukbasi
kai-wei
chang
james
zou
venkatesh
saligrama
adam
kalai
man
computer
programmer
woman
homemaker
debiasing
word
embeddings
advances
neural
information
processing
systems
pages
4349
4357
2016
bma15
eytan
bakshy
solomon
messing
lada
adamic
exposure
ideologically
diverse
news
opinion
facebook
science
348
6239
1130
1132
2015
bs15
barocas
selbst
big
data
disparate
impact
ssrn
elibrary
2015
bt52
ralph
allan
bradley
milton
terry
rank
analysis
incomplete
block
designs
method
paired
comparisons
biometrika
39
324
345
1952
cdk
17
elisa
celis
amit
deshpande
tarun
kathuria
damian
straszak
nisheeth
vishnoi
complexity
constrained
determinantal
point
processes
approx
random
2017
pages
36
36
22
2017
cdkv16
elisa
celis
amit
deshpande
tarun
kathuria
nisheeth
vishnoi
fair
diverse
fairness
accountability
transparency
machine
learning
2016
cg98
jaime
carbonell
jade
goldstein
use
mmr
diversity-based
reranking
reordering
documents
producing
summaries
proceedings
21st
annual
international
acm
sigir
conference
research
development
information
retrieval
pages
335
336
acm
1998
chrg16
matthew
costello
james
hawdon
thomas
ratliff
tyler
grantham
views
online
extremism
individual
attributes
leading
exposure
computers
human
behavior
63
311
320
2016
27
chv57
elisa
celis
lingxiao
huang
nisheeth
vishnoi
multiwinner
voting
fairness
constraints
ijcai-ecai
2018
arxiv
1710.10057
ck05
chandra
chekuri
sanjeev
khanna
polynomial
time
approximation
scheme
multiple
knapsack
problem
siam
comput
35
713
728
2005
ckc
08
charles
la
clarke
maheedhar
kolla
gordon
cormack
olga
vechtomova
azin
ashkan
stefan
bu
ttcher
ian
mackinnon
novelty
diversity
information
retrieval
evaluation
proceedings
31st
annual
international
acm
sigir
conference
research
development
information
retrieval
pages
659
666
acm
2008
ckk16
elisa
celis
peter
krafft
nathan
kobe
sequential
voting
promotes
collective
discovery
social
recommendation
systems
proceedings
tenth
international
conference
web
social
media
cologne
germany
may
17
20
2016
pages
42
51
2016
cks
18
elisa
celis
vijay
keswani
damian
straszak
amit
deshpande
tarun
kathuria
nisheeth
vishnoi
fair
diverse
dpp-based
data
summarization
corr
abs
1802.04023
2018
ct17
elisa
celis
siddartha
tekriwal
users
want
sites
quality
diversity
international
conference
computational
social
science
ic2s2
2017
cv17
elisa
celis
nisheeth
vishnoi
fair
personalization
fairness
accountability
transparency
machine
learning
2017
dhp
12
cynthia
dwork
moritz
hardt
toniann
pitassi
omer
reingold
richard
zemel
fairness
awareness
itcs
new
york
ny
usa
2012
acm
dkns01
cynthia
dwork
ravi
kumar
moni
naor
dandapani
sivakumar
rank
aggregation
methods
web
proceedings
10th
international
conference
world
wide
web
pages
613
622
acm
2001
er15
robert
epstein
ronald
robertson
search
engine
manipulation
effect
seme
possible
impact
outcomes
elections
proceedings
national
academy
sciences
112
33
e4512
e4521
2015
fj12
uriel
feige
shlomo
jozeph
universal
factor
graphs
automata
languages
programming
39th
international
colloquium
icalp
2012
warwick
uk
july
13
2012
proceedings
part
pages
339
350
2012
fkm
06
ronald
fagin
ravi
kumar
mohammad
mahdian
sivakumar
erik
vee
comparing
partial
rankings
siam
journal
discrete
mathematics
20
628
648
2006
fks03
ronald
fagin
ravi
kumar
dakshinamurthi
sivakumar
comparing
top
lists
siam
journal
discrete
mathematics
17
134
160
2003
grsz14
fabrizio
grandoni
ravi
mohit
singh
rico
zenklusen
new
approaches
multi-objective
optimization
mathematical
programming
146
525
554
2014
28
gs09
sreenivas
gollapudi
aneesh
sharma
axiomatic
approach
result
diversification
proceedings
18th
international
conference
world
wide
web
pages
381
390
acm
2009
has96
hastad
clique
hard
approximate
within
n1
proceedings
37th
annual
symposium
foundations
computer
science
focs
96
ieee
computer
society
1996
hss03
elad
hazan
shmuel
safra
oded
schwartz
complexity
approximating
k-dimensional
matching
approx-random
03
pages
83
97
springer
2003
jen76
jenkyns
efficacy
greedy
algorithm
proc
7th
s-e
conf
combinatorics
graph
theory
computing
pages
341
350
1976
jk02
kalervo
ja
rvelin
jaana
keka
la
inen
cumulated
gain-based
evaluation
ir
techniques
acm
transactions
information
systems
tois
20
422
446
2002
kir16
keith
kirkpatrick
battling
algorithmic
bias
ensure
algorithms
treat
us
fairly
communications
acm
59
10
16
17
2016
kmm15
matthew
kay
cynthia
matuszek
sean
munson
unequal
representation
gender
stereotypes
image
search
results
occupations
proceedings
33rd
annual
acm
conference
human
factors
computing
systems
pages
3819
3828
acm
2015
kmr17
jon
kleinberg
sendhil
mullainathan
manish
raghavan
inherent
trade-offs
fair
determination
risk
scores
innovations
theoretical
computer
science
2017
kv10
ravi
kumar
sergei
vassilvitskii
generalized
distances
rankings
proceedings
19th
international
conference
world
wide
web
pages
571
580
acm
2010
mes06
julia
mestre
greedy
approximation
algorithms
algorithms
esa
2006
14th
annual
european
symposium
zurich
switzerland
september
11
13
2006
proceedings
pages
528
539
2006
mk60
melvin
earl
maron
john
kuhns
relevance
probabilistic
indexing
information
retrieval
journal
acm
jacm
216
244
1960
mon95
burt
monroe
fully
proportional
representation
american
political
science
review
89
925
940
1995
mrs
08
christopher
manning
prabhakar
raghavan
hinrich
schu
tze
et
al
introduction
information
retrieval
cambridge
university
press
cambridge
2008
pdsat12
debmalya
panigrahi
atish
das
sarma
gagan
aggarwal
andrew
tomkins
online
selection
diverse
results
proceedings
fifth
acm
international
conference
web
search
data
mining
pages
263
272
acm
2012
rbcj09
filip
radlinski
paul
bennett
ben
carterette
thorsten
joachims
redundancy
diversity
interdependent
document
relevance
acm
sigir
forum
volume
43
pages
46
52
acm
2009
29
rkj08
filip
radlinski
robert
kleinberg
thorsten
joachims
learning
diverse
rankings
multi-armed
bandits
proceedings
25th
international
conference
machine
learning
pages
784
791
acm
2008
rob77
stephen
robertson
probability
ranking
principle
ir
journal
documentation
33
294
304
1977
sb88
gerard
salton
christopher
buckley
term-weighting
approaches
automatic
text
retrieval
information
processing
management
24
513
523
1988
spe04
charles
spearman
proof
measurement
association
two
things
american
journal
psychology
15
72
101
1904
spe06
charles
spearman
footrule
measuring
correlation
british
journal
psychology
1904
1920
89
108
1906
srg13
aleksandrs
slivkins
filip
radlinski
sreenivas
gollapudi
ranked
bandits
metric
spaces
learning
diverse
rankings
large
document
collections
journal
machine
learning
research
14
feb
399
436
2013
sri95
aravind
srinivasan
improved
approximations
packing
covering
problems
proceedings
twenty-seventh
annual
acm
symposium
theory
computing
29
may-1
june
1995
las
vegas
nevada
usa
pages
268
276
1995
ys17
ke
yang
julia
stoyanovich
measuring
fairness
ranked
outputs
proceedings
29th
international
conference
scientific
statistical
database
management
chicago
il
usa
june
27
29
2017
pages
22
22
2017
zcl03
cheng
xiang
zhai
william
cohen
john
lafferty
beyond
independent
relevance
methods
evaluation
metrics
subtopic
retrieval
proceedings
26th
annual
international
acm
sigir
conference
research
development
informaion
retrieval
pages
10
17
acm
2003
zh08
mi
zhang
neil
hurley
avoiding
monotony
improving
diversity
recommendation
lists
proceedings
2008
acm
conference
recommender
systems
pages
123
130
acm
2008
zmkl05
cai-nicolas
ziegler
sean
mcnee
joseph
konstan
georg
lausen
improving
recommendation
lists
topic
diversification
proceedings
14th
international
conference
world
wide
web
pages
22
32
acm
2005
zuc07
david
zuckerman
linear
degree
extractors
inapproximability
max
clique
chromatic
number
theory
computing
103
128
2007
zvgrg15
muhammad
bilal
zafar
isabel
valera
manuel
gomez
rodriguez
krishna
gummadi
fairness
constraints
mechanism
fair
classification
fairness
accountability
transparency
machine
learning
2015
zws
13
rich
zemel
yu
wu
kevin
swersky
toni
pitassi
cynthia
dwork
learning
fair
representations
proceedings
30th
international
conference
machine
learning
pages
325
333
2013
30
values
wij
common
ranking
metrics
information
retrieval
proposing
new
ranking
method
naturally
important
evaluate
quality
resulting
output
towards
variety
ranking
metrics
developed
ideally
one
use
metrics
compare
good
constrained
ranking
respect
quality
comparison
unconstrained
ranking
putting
another
way
like
maximize
quality
constrained
ranking
measured
metrics
section
briefly
survey
three
important
classes
ranking
metrics
translated
setting
show
problem
formulation
can
capture
metrics
defining
values
wij
appropriately
metrics
often
defined
respect
item
quality
often
referred
relevance
ir
literature
without
loss
generality
relabel
items
a1
a2
denote
qualities
ease
presentation
introduce
simple
forms
metrics
often
practice
normalized
better
comparison
across
rankings
two
equivalent
respect
optimization
consider
integral
rankings
ωm
every
every
11
xij
xij
rank-1
metrics
quality
ranking
considered
sum
quality
items
quality
item
position
discounted
value
non-increasing
words
getting
order
correct
top
list
important
getting
correct
bottom
formally
given
ranking
ωm
rank-1
metric
defined
mr1
ai
xij
non-increasing
function
common
examples
discounted
cumulative
gain
dcg
jk02
log
variants
rank-1
metrics
can
simply
define
wij
ai
let
us
now
show
property
holds
metric
select
two
i1
i2
j1
j2
definition
ai1
ai2
j1
j2
hence
wi1
j1
wi2
j1
wi1
j1
wi1
j2
implies
wi1
j1
wi2
j2
wi1
j2
wi2
j1
ai1
j1
ai2
j2
ai1
j2
ai2
j1
ai1
ai2
j1
j2
property
holds
bradley-terry
metrics
variety
multiplicative
ranking
metrics
originally
developed
goal
sampling
distribution
complete
rankings
ωm
example
bradley-terry
model
ai1
bt52
quantity
ai
denotes
probability
item
i1
ranked
item
i2
i2
ai1
gives
rise
metric
mbt
ai
ai
removing
denominator
i1
i2
xi1
j1
xi2
j2
j1
j2
31
every
pair
items
appears
exactly
easy
see
metric
can
rewritten
mbt
ai
xij
hence
equivalent
maximize
log
mbt
nj
xij
log
ai
letting
a0i
log
ai
rank-1
metric
non-increasing
a0i
hence
fits
formulation
discussed
alignment
metrics
one
can
also
consider
metrics
depend
difference
item
positions
two
rankings
let
ωm
optimal
unconstrained
ranking
corresponds
sorting
non-increasing
order
ai
alignment
metrics
defined
respect
positions
items
give
examples
given
ranking
ωm
setting
spearman
footrule
spe06
corresponds
mf
2m
xij
ij
similarly
spearman
rho
spe04
corresponds
mρ
2m
xij
ij
vary
slightly
usual
definitions
partial
rather
complete
ranking
measure
similarity
rather
difference
former
line
partial
ranking
versions
spearman
footrule
spearman
rho
fks03
fkm
06
latter
add
value
maintain
non-negativity
monotonicity
metrics
can
naturally
captured
formulation
letting
wij
2m
wij
2m
respectively
ij
two
i1
i2
j1
j2
clear
wi1
j1
wi2
j1
wi1
j1
wi1
j2
desired
furthermore
difficult
show
via
simple
tedious
case
analysis
possible
orderings
j1
j2
j1
j2
desired
property
wi1
j1
wi2
j2
wi1
j2
wi2
j1
holds
one
can
also
think
weighted
versions
metrics
introduced
kv10
observations
generalize
32