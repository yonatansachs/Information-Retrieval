fairsearch
tool
fairness
ranked
search
results
meike
zehlike
tom
sühr
humboldt
universität
zu
berlin
technische
universität
berlin
max
planck
inst
software
systems
tom.suehr@googlemail.com
meikezehlike@mpi-sws.org
carlos
castillo
ivan
kitanovski
universitat
pompeu
fabra
faculty
computer
science
engineering
chato@acm.org
university
saint
cyril
methodius
ivan.kitanovski@finki.ukim.mk
abstract
relevant
content
ranking
algorithms
automatically
score
sort
ranked
search
results
recommendations
become
main
contents
us
typically
decreasing
probability
mechanism
find
content
products
places
people
item
relevant
therefore
often
algorithms
online
hiring
selecting
purchasing
dating
increas
choose
products
offered
news
ingly
mediated
algorithms
rankings
may
determine
business
read
also
people
meet
whether
get
loan
opportunities
education
access
benefits
even
social
success
invitation
job
interview
hiring
selecting
purchasing
therefore
societal
ethical
importance
ask
whether
dating
increasingly
mediated
algorithms
rankings
may
search
results
can
demote
marginalize
exclude
individuals
determine
business
opportunities
education
access
benefits
unprivileged
groups
promote
products
undesired
features
even
social
success
therefore
societal
ethical
importance
paper
present
fairsearch
first
fair
open
source
ask
whether
search
algorithms
produce
results
can
demote
search
api
provide
fairness
notions
ranked
search
results
marginalize
exclude
individuals
unprivileged
groups
implement
two
well-known
algorithms
literature
namely
racial
gender
discrimination
promote
products
undesired
fa
ir
zehlike
et
al
2017
deltr
zehlike
castillo
2018
features
gendered
books
provide
stand-alone
libraries
python
java
ad
paper
operates
concept
historically
currently
ditionally
implement
interfaces
elasticsearch
algo
disadvantaged
protected
group
concern
disparate
impact
rithms
well-known
search
engine
api
based
apache
lucene
loss
opportunity
said
group
independently
whether
interfaces
use
aforementioned
java
libraries
enable
treated
differently
rankings
disparate
impact
translates
search
engine
developers
wish
ensure
fair
search
results
differences
exposure
inequality
attention
across
different
styles
easily
integrate
deltr
fa
ir
groups
understood
systematic
differences
existing
elasticsearch
environment
access
economic
social
opportunities
paper
present
fairsearch
first
fair
open
source
ccs
concepts
search
api
implements
two
well-known
methods
literature
namely
fa
ir
deltr
10
algorithms
information
systems
learning
rank
applied
com
implementation
provided
stand-alone
java
python
puting
law
social
behavioral
sciences
library
well
interfaces
elasticsearch
popular
well
tested
search
engine
used
many
big
brands
keywords
amazon
netflix
facebook
goal
fairsearch
pro
ranking
algorithmic
fairness
disparate
impact
vide
various
approaches
fair
ranking
algorithms
broad
acm
reference
format
spectrum
justice
definitions
satisfy
many
possible
fairness
meike
zehlike
tom
sühr
carlos
castillo
ivan
kitanovski
2020
fairsearch
policies
various
business
situations
providing
algorithms
tool
fairness
ranked
search
results
companion
proceedings
stand-alone
libraries
python
java
elasticsearch
web
conference
2020
www
20
companion
april
20
24
2020
taipei
make
on-going
research
fair
machine
learning
accessible
taiwan
acm
new
york
ny
usa
pages
https://doi.org/10.1145/3366424.
ready-to-use
broad
community
professional
developers
3383534
researchers
particularly
working
realm
human
introduction
centric
socio-technical
systems
well
sharing
economy
platforms
volume
information
increasing
frenetic
pace
ranked
search
results
become
main
mechanism
find
theoretical
background
section
explains
math
behind
fa
ir
deltr
gives
paper
published
creative
commons
attribution
4.0
international
cc
4.0
license
authors
reserve
rights
disseminate
work
examples
application
domain
deltr
10
constitutes
personal
corporate
web
sites
appropriate
attribution
called
in-processing
approach
incorporates
fairness
term
www
20
companion
april
20
24
2020
taipei
taiwan
learning
objective
way
can
learn
ignore
protected
2020
iw3c2
international
world
wide
web
conference
committee
published
creative
commons
cc
4.0
license
feature
well
non-protected
ones
serve
proxies
acm
isbn
978
4503
7024
20
04
https://doi.org/10.1145/3366424.3383534
https://www.elastic.co/
172
www
20
companion
april
20
24
2020
taipei
taiwan
zehlike
et
al
aa
aa
10
11
12
0.1
0.3
0.5
case
non-protected
elements
appear
first
training
set
0.7
table
example
values
minimum
number
pro
tected
items
must
appear
top
positions
pass
ranked
group
fairness
test
0.1
call
mtable
table
given
ranking
length
ratio
protected
items
fall
far
given
ranking
position
fa
ir
translates
case
protected
elements
appear
first
training
set
figure
depiction
test
results
using
synthetic
data
top
constraint
statistical
significance
test
using
binomial
deltr
reduces
disparate
exposure
bottom
asymmetry
cumulative
distribution
function
parameters
deltr
change
rankings
protected
ele
declares
ranking
fairly
representing
protected
group
ments
already
appear
first
positions
following
constraint
holds
zip
code
fa
ir
belongs
class
post-processing
proce
τp
dures
re-ranks
given
search
engine
result
meet
predefined
τp
actual
number
protected
items
ranking
fairness
constraints
test
constraint
can
now
used
calculate
min
imum
number
protected
items
ranking
position
2.1
deltr
learning-to-rank
approach
constraint
holds
see
table
different
examples
traditional
learning-to-rank
ltr
systems
ranking
function
example
consider
ranking
table
corresponds
learned
minimizing
loss
function
measures
error
job
candidate
search
economist
xing
dataset
predictions
made
training
judgments
used
observe
proportion
male
female
deltr
loss
function
listnet
well-known
ltr
algorithm
extended
term
measures
unfairness
position
top
10
top
10
top
40
top
40
predicted
ranking
way
new
loss
function
deltr
10
male
female
male
female
γu
simultaneously
optimizes
relevance
fairness
90
10
73
27
defined
measure
disparate
exposure
across
different
social
groups
probabilistic
ranking
py
means
discrepancies
table
example
non-uniformity
top-10
vs
top
probability
appear
top
position
received
items
40
results
query
economist
xing
jan
2017
table
protected
group
vs
items
non-protected
group
measured
candidates
keeps
changing
throughout
top
positions
max
exposure
py
exposure
py
case
disadvantages
women
preferring
men
top-10
po
sitions
suppose
required
proportion
female
candidates
figure
shows
deltr
works
synthetic
dataset
0.3
translates
least
one
female
candidate
total
size
50
items
item
represented
top-10
positions
hence
ranking
table
will
ac
two
features
protection
status
score
cepted
fair
however
required
proportion
0.5
attribute
item
belongs
translates
needing
least
one
female
candidate
top-4
protected
group
otherwise
scores
distributed
two
top-7
three
top-9
positions
case
uniformly
random
two
non-overlapping
intervals
training
ranking
will
reordered
fa
ir
meet
fairness
constraints
documents
ordered
decreasing
scores
hence
top
element
furthermore
library
implements
best
possible
adjustment
one
highest
score
desired
significance
level
necessary
first
consider
scenario
protected
elements
test
representation
like
table
multi-hypothesis
test
strictly
smaller
scores
non-protected
ones
figure
1a
standard
learning
rank
algorithm
case
places
non
fairsearch
deltr
plugin
protected
elements
protected
elements
giving
integration
deltr
elasticsearch
use
elas
larger
exposure
instead
deltr
increasing
values
reduces
ticsearch
learning
rank
ltr-es
plugin
integration
ar
disparate
exposure
still
considering
discrepancy
chitecture
depicted
figure
logic
consists
two
phases
score
values
figure
1b
shows
asymmetry
method
training
ranking
protected
elements
already
receive
larger
predicted
exposure
training
apply
deltr
run-time
retrieval
ltr-es
needs
non-protected
ranker
deltr
will
behave
like
previously
trained
model
uploaded
model
storage
standard
ltr
approach
since
training
models
cpu
intensive
task
involves
2.2
fa
ir
re-ranking
approach
lot
supervision
verification
happens
offline
deltr
post-processing
method
fa
ir
assumes
ranking
wrapper
calls
stand-alone
deltr
python
library
function
already
trained
ranked
search
result
train
ltr-es
suitable
model
wrapper
provided
available
ranked
group
fairness
constraint
guarantees
https://elasticsearch-learning-to-rank.readthedocs.io/en/latest/
173
fairsearch
tool
fairness
ranked
search
results
www
20
companion
april
20
24
2020
taipei
taiwan
architecture
fa
ir
elasticsearch
plugin
demo
application
figure
architecture
fa
ir
elasticsearch
plugin
demo
webapp
fa
ir
elasticsearh
plugin
red
indicates
protected
items
training
set
training
parameters
name
interface
applies
previously
learned
weights
model
training
wrapper
calls
ltr-es
upload
api
document
features
top
results
produce
final
ranking
stores
serialized
model
inside
elasticsearch
ltr
plugin
rescorer
specify
two
key
parameters
making
available
up-coming
retrieval
tasks
upon
upload
window_size
number
elements
re-score
usually
wrapper
specifies
model_name
type
always
deltr
model
feature_set
trained
feature_set
model
model
name
specifies
query-dependent
features
tell
ltr-es
docu
ment
features
use
applying
model
post
ranking
elasticsearch
ranks
retrieved
documents
applying
query
match
re-scoring
methods
executing
query
entire
elas
snow
ticsearch
cluster
expensive
system
first
executes
rescore
baseline
relevance
query
entire
index
returns
top
window_size
1000
results
rescorer
modifies
scores
top
results
query
returns
new
list
deltr
implements
elastic
rescorer
rescore_query
sltr
params
keywords
snow
model
code
constitutes
sample
rescore
query
using
deltr
limit
result
set
documents
match
jon
snow
results
scored
based
elasticsearch
default
similarity
bm25
top
already
somewhat
relevant
results
apply
deltr
model
get
best
fairest
ranking
top
1000
documents
fairsearch
fa
ir
plugin
fa
ir
plugin
enables
elasticsearch
process
search
query
re-rank
result
using
fa
ir
parameters
extends
elasticsearch
api
two
new
endpoints
fair
rescorer
json
object
contains
parameters
fa
ir
two
new
endpoints
create
new
request
existing
mtable
integer
array
implements
table
generated
mtables
persisted
within
elasticsearch
usage
avoid
additional
computational
costs
search
time
figure
2a
shows
control
figure
architecture
elasticsearch
plugin
integra
flow
inside
plugin
fa
ir
query
passed
elasticsearch
tion
deltr
174
www
20
companion
april
20
24
2020
taipei
taiwan
zehlike
et
al
algorithm
construct
mtable
input
ranking
size
minimum
proportion
significance
output
mtable
nk
0k
αc
adjustalpha
mi
inversecdf
αc
end
return
elastic
returns
standard
result
ranking
plugin
plugin
figure
re-ranking
elasticsearch
result
according
re-ranks
result
according
respective
mtable
mtable
shields
indicate
protected
items
matches
input
parameters
note
execution
unaware
search
query
built-in
features
still
possible
demonstration
libraries
plugins
available
https://github.com/fair-search.
post
demo
will
consist
two
main
parts
first
will
explain
size
architecture
fa
ir
deltr
use
figures
paper
match
body
next
will
live
coding
session
fa
ir
will
code
rescore
mini
example
going
setup
algorithm
elastic
window_size
search
instance
will
show
integrate
parameters
fair_rescorer
interact
elasticsearch
plugin
via
protected_key
gender
search
queries
introduction
fa
ir
python
library
protected_value
elasticsearch
plugin
available
youtube
11
deltr
alpha
will
use
synthetic
dataset
section
2.1
train
fair
model
min_proportion_protected
will
show
upload
model
elasticsearch
using
deltr-wrapper
used
issuing
search
query
components
communicate
via
rest
api
http
requests
second
using
results
live
coding
session
will
code
represents
http
request
plugin
observe
algorithms
influence
ranking
results
demo
elasticsearch
executes
regular
search
using
specified
website
figure
2b
job
candidate
search
operates
query
object
match
object
query
terms
result
resume
dataset
lastly
will
demonstrate
different
input
re-ranked
plugin
using
fa
ir
fairness
constraints
parameters
deltr
fa
ir
will
affect
results
give
named
met
first
mtable
handler
will
intuition
best
practice
choices
parameters
two
check
mtable
parameters
already
exists
right
side
parts
also
shown
youtube
tutorial
figure
2a
plugin
calls
mtable
generator
require
large
screen
attendees
will
able
follow
create
using
algorithm
stores
mtable
storage
coding
examples
distance
key-value
pairs
key
note
mtable
handler
figure
2a
simplification
java
classes
interfaces
references
purpose
presentation
fa
ir
ranker
figure
2a
re-ranks
2018
resumes
dataset
labels
2018
https://www.kaggle.com/
iammhaseeb
resumes-dataset-with-labels
accessed
2018
11
02
elasticsearch
results
according
requested
mtable
figure
toon
calders
indre
žliobaite
2013
unbiased
computational
processes
returns
http
response
json
format
like
can
lead
discriminative
decision
procedures
discrimination
privacy
information
society
springer
43
57
standard
elasticsearch
result
zhe
cao
tao
qin
tie-yan
liu
ming-feng
tsai
hang
li
2007
learning
rank
pairwise
approach
listwise
approach
proceedings
24th
conclusion
international
conference
machine
learning
acm
129
136
paper
presented
fairsearch
first
open
source
api
cynthia
dwork
moritz
hardt
toniann
pitassi
omer
reingold
richard
zemel
2012
fairness
awareness
proc
itcs
acm
press
214
226
search
engines
provide
fair
search
results
implemented
moritz
hardt
2014
big
data
unfair
understanding
sources
unfairness
previously
published
methods
stand-alone
libraries
python
data
driven
decision
making
2014
stephen
robertson
1977
probability
ranking
principle
ir
journal
java
embedded
plugins
elasticsearch
documentation
33
1977
294
304
plugins
intended
off-the-shelf
implementations
ashudeep
singh
thorsten
joachims
2018
fairness
exposure
rankings
elasticsearch
engineers
stand-alone
libraries
allow
great
flexi
proceedings
24th
acm
sigkdd
international
conference
knowledge
discovery
data
mining
acm
2219
2228
bility
use
technology
solr
way
latanya
sweeney
2013
discrimination
online
ad
delivery
queue
11
2013
hope
fairness-aware
algorithms
will
make
way
faster
10
productive
code
business
environments
avoid
bad
social
meike
zehlike
francesco
bonchi
carlos
castillo
sara
hajian
mohamed
mega
hed
ricardo
baeza-yates
2017
fa
ir
fair
top-k
ranking
algorithm
consequences
discrimination
search
results
proc
2017
acm
conference
information
knowledge
management
acm
1569
1578
acknowledgments
project
realized
research
10
meike
zehlike
carlos
castillo
2018
reducing
disparate
exposure
ranking
grant
data
transparency
lab
castillo
partially
funded
learning
rank
approach
arxiv
preprint
arxiv
1805.08716
2018
la
caixa
project
lcf
pr
pr16
11110009
zehlike
funded
11
meike
zehlike
tom
sühr
2019
fa
ir
fairsearch
tutorial
05
01
2019
https://youtu.be/uxxtijlb5sy
mpi-sws
175